[base]
default_ee = quay.io/ansible/creator-ee:v0.2.0
small_test_ee = quay.io/ansible/python-base

[tox]
envlist = lint, py38, report, clean
minversion = 3.16.1
skipsdist = True
skip_missing_interpreters = true


[testenv]
description = Run pytest under {basepython} ({envpython})
# the pytest command line is not in the project.toml because of issues
# with catching breakpoints while debugging unit tests the number of
# CPUs is set to 50% b/c CI timeout failures were more likely the small
# test image is used an alternative to the default, but should be it
# one of it's layer
allowlist_externals =
  cat
  rm
  grep
deps =
  -r{toxinidir}/requirements.txt
  -r{toxinidir}/test-requirements.txt
commands =
  /bin/bash -c 'grep -iFInrq "UPDATE_FIXTURES = True" ./tests && exit 1 || exit 0'
  /bin/bash -c 'podman pull -q {[base]default_ee} || docker pull -q {[base]default_ee}'
  /bin/bash -c 'podman pull -q {[base]small_test_ee} || docker pull -q {[base]small_test_ee}'
  # most coverage options are kept in pyproject.toml
  /bin/bash -c 'py.test -vvvv -n `python -c "import multiprocessing; import os; print(int(os.environ.get(\"XDIST_CPU\") or multiprocessing.cpu_count()))"` --dist=loadfile --maxfail=15 --durations=100 --cov --cov-report=xml:{toxworkdir}/coverage-{envname}.xml --showlocals {posargs}'
setenv =
  TERM = xterm-256color
passenv =
  CI
  GITHUB_*
  CONTAINER_*
  DOCKER_*
  HOME
  PYTEST_*
  SSH_AUTH_SOCK
  TERM
  USER
  XDIST_CPU

[testenv:clean]
description = Erase coverage data
deps = coverage[toml]
skip_install = true
commands =
  coverage erase

[testenv:report]
description = Produce coverage report
deps = coverage[toml]
skip_install = true
commands =
    coverage report
    cat .tox/.tmp/.mypy/index.txt

# Note included in the default envlist above since it's destructive
# (requires tmux, git, runs a bunch of commands, etc.)
[testenv:smoke]
description = Run smoke tests under {basepython} ({envpython})
commands = ansible-playbook tests/smoketests/run.yml
allowlist_externals = ansible-playbook

[testenv:lint]
description = Enforce quality standards under {basepython} ({envpython})
install_command = pip install {opts} {packages}
commands =
  pre-commit run {posargs:--show-diff-on-failure \
    --hook-stage manual \
    --all-files -v}
deps =
  {[testenv]deps}
  -r{toxinidir}/docs/requirements.in
setenv =
  # NOTE: Although stage=manual hooks are included in the above
  # NOTE: pre-commit run, some may not be enforced and should be included
  # NOTE: in the skip list below.
  # NOTE: Running some of the MyPy checks is disabled here but they may
  # NOTE: be reconfigured in the pre-commit configuration file. So the
  # NOTE: value of the `SKIP` env var must not be updated separately
  # NOTE: from changing the pre-commit setup.
  {[testenv]setenv}
  SKIP = flake8-extended, flake8-rule-candidates, mypy-py310


[testenv:lint-candidates]
description =
  Code quality improvement candidate rules for flake8
  under `{basepython}` ({envpython})
commands =
  {envpython} -m \
    pre_commit run \
    --show-diff-on-failure \
    --hook-stage manual \
    flake8-rule-candidates \
    {posargs:--all-files -v}
deps =
  pre-commit
isolated_build = true
skip_install = true


[testenv:lint-vetting]
description =
  Vetting newer quality standards under `{basepython}` ({envpython})
commands =
  {envpython} -m \
    pre_commit run \
    --show-diff-on-failure \
    --hook-stage manual \
    {posargs:--all-files -v}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} -c \
  'cmd = "{envpython} -m pre_commit install"; \
    scr_width = len(cmd) + 10; \
    sep = "=" * scr_width; \
    cmd_str = "    $ \{cmd\}";' \
    'print(f"\n\{sep\}\nTo install pre-commit hooks into the Git repo, run:\n\n\{cmd_str\}\n\n\{sep\}\n")'
deps =
  pre-commit
isolated_build = true
setenv =
  {[testenv]setenv}
  SKIP = pylint
skip_install = true


[testenv:build-docs]
allowlist_externals =
  git
deps =
  -r{toxinidir}/docs/requirements.in
  # FIXME: re-enable the "-r" + "-c" paradigm once the pip bug is fixed.
  # Ref: https://github.com/pypa/pip/issues/9243
  # -r{toxinidir}/docs/requirements.in
  # -c{toxinidir}/docs/requirements.txt
description = Build The Docs
changedir = {toxinidir}/docs
commands =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Build the html docs with Sphinx:
  {envpython} -m sphinx \
    -j auto \
    -b html \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -d "{temp_dir}/.doctrees" \
    . \
    "{envdir}/docs_out"

  # Print out the output docs dir and a way to serve html:
  -{envpython} -c\
  'import pathlib;\
  docs_dir = pathlib.Path(r"{envdir}") / "docs_out";\
  index_file = docs_dir / "index.html";\
  print("\n" + "=" * 120 +\
  f"\n\nDocumentation available under:\n\n\
  \tfile://\{index_file\}\n\nTo serve docs, use\n\n\
  \t$ python3 -m http.server --directory \
  \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0\n\n" +\
  "=" * 120)'
isolated_build = true
passenv =
  SSH_AUTH_SOCK
skip_install = false
usedevelop = true


[testenv:make-changelog]
basepython = python3
depends =
  check-changelog
description =
  Generate a changelog from fragments using Towncrier. Getting an
  unreleased changelog preview does not require extra arguments.
  When invoking to update the changelog, pass the desired version as an
  argument after `--`. For example, `tox -e {envname} -- 1.3.2`.
commands =
  {envpython} -m \
    towncrier.build \
    --version \
    {posargs:'[UNRELEASED DRAFT]' --draft}
deps =
  towncrier == 21.3.0
isolated_build = true
skip_install = true


[testenv:check-changelog]
basepython = {[testenv:make-changelog]basepython}
description =
  Check Towncrier change notes
commands =
  {envpython} -m \
    towncrier.check \
    --compare-with origin/main \
    {posargs:}
deps =
  {[testenv:make-changelog]deps}
isolated_build = {[testenv:make-changelog]isolated_build}
skip_install = {[testenv:make-changelog]skip_install}
