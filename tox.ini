[tox]
requires =
    tox>=4.25
    tox-extra>=2.1
    tox-uv>=1.25
env_list =
    py
    lint
    report
    packaging
    docs
    clean
skip_missing_interpreters = true
work_dir = {env:TOX_WORK_DIR:.tox}

[testenv]
description =
    Run pytest under {base_python} ({env_python})
    update-fixtures: and update test fixtures
package = editable
extras =
    test
pass_env =
    ANSIBLE_NAVIGATOR_UPDATE_TEST_FIXTURES
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
    USER
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{env_dir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    FORCE_COLOR = 1
    PIP_CONSTRAINT = {toxinidir}/.config/constraints.txt
    PRE_COMMIT_COLOR = always
    TERM = xterm-256color
    UV_CONSTRAINT = {toxinidir}/.config/constraints.txt
    update-fixtures: ANSIBLE_NAVIGATOR_UPDATE_TEST_FIXTURES = true
    update-fixtures: PYTEEST_ADDOPST = --maxfail=0
commands =
    ansible-navigator run ./tests/fixtures/integration/actions/lint/no_errors/playbook.yml --ee true --ce podman --eei ghcr.io/ansible/community-ansible-dev-tools:latest --mode stdout --pae false
    sh -c 'grep -iFInrq "UPDATE_FIXTURES = True" ./tests && exit 1 || exit 0'
    coverage run -m pytest {posargs:-n=auto --dist=loadfile --junitxml=./junit.xml}
commands_post =
    ./tools/report-coverage
allowlist_externals =
    ./tools/report-coverage
    cat
    grep
    pre-commit
    rm
    sh

[testenv:lint]
description = Enforce quality standards under {base_python} ({env_python})
deps =
    --editable .
    pre-commit
    pre-commit-uv
set_env =
    {[testenv]set_env}
    PIP_CONSTRAINT = /dev/null
    SKIP = cspell, flake8-rule-candidates, mypy-py310
    UV_CONSTRAINT = /dev/null
commands =
    sh -c "ansible-navigator --ee false settings --schema json > src/ansible_navigator/data/ansible-navigator.json"
    pre-commit run {posargs:--show-diff-on-failure \
      --hook-stage manual \
      --all-files}
commands_post =

[testenv:report]
description = Produce coverage report
skip_install = true
deps =
    coverage[toml]
commands =
    coverage report
    cat .tox/.tmp/.mypy/index.txt

[testenv:packaging]
description =
    Build package, verify metadata, install package
skip_install = true
deps =
    build>=0.7
    pip
    twine
commands =
    {env_python} -c 'import os.path, shutil, sys; \
      dist_dir = os.path.join("{toxinidir}", "dist"); \
      os.path.isdir(dist_dir) or sys.exit(0); \
      print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
      shutil.rmtree(dist_dir)'
    {env_python} -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    twine check --strict {toxinidir}/dist/*
    sh -c "python3 -m pip install {toxinidir}/dist/*.whl"
    ansible-navigator --version
    pip uninstall -y ansible-navigator
commands_post =

[testenv:docs]
description = Build The Docs
package = editable
skip_install = false
deps =
    --editable .[docs]
pass_env =
    SSH_AUTH_SOCK
commands_pre =
    rm -rf .cache/plugin
commands =
    mkdocs {posargs:build --strict}
commands_post =
isolated_build = true

[testenv:clean]
description = Erase coverage data
skip_install = true
deps =
    coverage[toml]
commands =
    coverage erase

[testenv:deps]
description = Bump all test dependencies
skip_install = true
set_env =
    PIP_CONSTRAINT = /dev/null
    UV_CONSTRAINT = /dev/null
commands =
    uv pip compile -q --upgrade --universal --python-version=3.10 --no-annotate --all-extras --output-file=.config/constraints.txt --strip-extras pyproject.toml
commands_post =

[testenv:no-test-deps]
description = Run smoke(unittest) under {base_python} ({env_python})
deps =
    --editable .
    ansible-core
commands =
    python3 -m unittest tests/smoke/no_test_dependencies.py
commands_post =

[base]
